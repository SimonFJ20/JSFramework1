(()=>{"use strict";var e=function(){function e(){}return e.setTitle=function(e){document.title=e},e.setCssImport=function(e){var n=document.createElement("link");n.rel="stylesheet",n.href="./style/"+e,document.head.appendChild(n)},e.id=function(e){return document.getElementById(e)},e.q=function(e){return document.querySelector(e)},e}(),n=function(e){return e.replace(/\r?\n|\r|\s{4}/g,"")},t=[],o=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];e.forEach((function(e){t.push(e)}))},i="frameworkappauth",r=i+"username",s=i+"token",a=null,l=function(){if(null!==sessionStorage.getItem(i)&&"0"!==sessionStorage.getItem(i)){if(null!==sessionStorage.getItem(r)&&"0"!==sessionStorage.getItem(r)&&null!==sessionStorage.getItem(s)&&"0"!==sessionStorage.getItem(s)){var e=sessionStorage.getItem(r),n=sessionStorage.getItem(s);a={username:e,token:n}}return!0}return!1},u=function(){var e;sessionStorage.setItem(i,"true"),null!==a&&(e=a,sessionStorage.setItem(s,e.token),sessionStorage.setItem(r,e.username))},d=!1,c=function(){sessionStorage.removeItem(i),sessionStorage.removeItem(s),sessionStorage.removeItem(r),location.reload()},m=function(){if(d){var n=e.id("topbarProfileButton");n.addEventListener("click",c),null!==a&&(n.innerText=a.username.charAt(0).toUpperCase()+a.username.slice(1))}},f=function(e){return o(m),d=e.authorized,!1===e.authorized?n('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n            </div>\n            <div class="private">\n                <a href="/" class="button">Login</a>\n            </div>\n        </div>\n        '):!0===e.authorized?n('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n                <a href="/" class="button">Home</a>\n                <a href="/feed" class="button">Feed</a>\n                <a href="/friends" class="button">Friends</a>\n            </div>\n            <div class="private">\n                <a href="/" class="button" id="topbarProfileButton">My Profile</a>\n            </div>\n        </div>\n        '):void 0},g=function(){var n,t,o=e.id("loginNotFound"),i=e.id("username"),r=e.id("password");""!=i.value&&""!=r.value?(n={username:i.value,password:r.value},t=function(e){e.authorized?(u(),location.reload()):(o.innerText="Incorrect Username or Password!",o.style.visibility="visible")},function(e,n){!function(e,n,t){var o={url:"/auth/login",method:"POST",timeout:0,headers:{"Content-Type":"application/json"},data:JSON.stringify(n)};$.ajax(o).done(t)}(0,e,(function(e){n(e)}))}(n,(function(e){if(e.authorized){if(void 0!==e.username&&void 0!==e.token){var n={username:e.username,token:e.token};a=n}u(),location.reload()}t(e)}))):(o.innerText="Please fill in both Username and Password!",o.style.visibility="visible")},p=function(){},v=function(){},h=function(){var n,t,o;e.id("loading").style.visibility="hidden",null===(n=e.id("login"))||void 0===n||n.addEventListener("click",g),null===(t=e.id("register"))||void 0===t||t.addEventListener("click",p),null===(o=e.id("recover"))||void 0===o||o.addEventListener("click",v)},b=function(){var n;e.setTitle("Homepage"),n=function(e){document.body.style.backgroundImage="url("+e.url+")",document.body.style.backgroundSize="100vw 100vh"},function(e,n){var t={url:"/misc/background",method:"GET",timeout:0};$.ajax(t).done(n)}(0,(function(e){n(e)}))},k=function(t){return o(b),t.authorized?n("\n        "+f({authorized:!0})+"\n        "):n("\n        "+f({authorized:!1})+"\n        "+(e.setCssImport("login.css"),o(h),n("\n    "+(e.setCssImport("loading.css"),n('\n        <div id="loading">\n            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: rgb(255, 255, 255, 0) none repeat scroll 0% 0%; display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">\n                <circle cx="50" cy="50" r="32" stroke-width="8" stroke="#ff1f1f" stroke-dasharray="50.26548245743669 50.26548245743669" fill="none" stroke-linecap="round">\n                <animateTransform attributeName="transform" type="rotate" dur="1s" repeatCount="indefinite" keyTimes="0;1" values="0 50 50;360 50 50"></animateTransform>\n                </circle>\n                <circle cx="50" cy="50" r="23" stroke-width="8" stroke="#ffffd0" stroke-dasharray="36.12831551628262 36.12831551628262" stroke-dashoffset="36.12831551628262" fill="none" stroke-linecap="round">\n                <animateTransform attributeName="transform" type="rotate" dur="1s" repeatCount="indefinite" keyTimes="0;1" values="0 50 50;-360 50 50"></animateTransform>\n                </circle>\n            </svg>\n        </div>\n    ')+'\n    <div id="loginpage">\n        <form id="loginform">\n            <input class="loginform logintext" id="username" type="text" placeholder="Username">\n            <br>\n            <input class="loginform logintext" id="password" type="password" placeholder="Password">\n            <p id="loginNotFound">Incorrect Username or Password!</p>\n            <hr>\n            <input class="loginform loginbutton" id="login" type="button" value="Login">\n            <br>\n            <div id="regrec">\n                <input class="loginform loginbutton regrec" id="register" type="button" value="Register">\n                <input class="loginform loginbutton regrec" id="recover" type="button" value="Recover">\n            </div>\n\n        </form>\n    </div>\n    '))+"\n        "))},y=document.getElementsByTagName("x-app")[0];null!=y?(y.innerHTML=function(){switch(e.setTitle("App"),e.setCssImport("main.css"),window.location.pathname){case"/":case"/login":return n(""+k({authorized:l()}));case"/todo":return n(""+f({authorized:l()})+(fetch("http://gamer/todo.page").then((function(e){return e.text()})).then((function(e){return document.write(e)})),n("")));default:return n(""+k({authorized:l()}))}}(),t.forEach((function(e){e()}))):console.log("%c<x-app></x-app>%c is not defined!","color: white; background-color: blue; font-size: 1.2em","color: red; font-size: 1.2em")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,