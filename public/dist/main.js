(()=>{"use strict";var n="frameworkappauth",e=function(){return null!=sessionStorage.getItem(n)&&"0"!==sessionStorage.getItem(n)},t=function(n){return n.replace(/\r?\n|\r|\s{4}/g,"")},i=function(){function n(){}return n.setTitle=function(n){document.title=n},n.setCssImport=function(n){document.createElement},n}(),o=function(n){return!1===n.authorized?t('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n            </div>\n            <div class="private">\n                <a href="/" class="button">Login</a>\n            </div>\n        </div>\n        '):!0===n.authorized?t('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n                <a href="/" class="button">Front page</a>\n                <a href="/feed" class="button">My feed</a>\n                <a href="/friends" class="button">Friends</a>\n            </div>\n            <div class="private">\n                <a href="/" class="button">My Profile</a>\n            </div>\n        </div>\n        '):void 0},r=function(n){return i.setTitle("Homepage"),n.authorized?t("\n        "+o({authorized:!0})+"\n        "):t("\n        "+o({authorized:!1})+"\n        "+t('\n    <div id="loginform">\n        <input id="username" type="text" placeholder="Username">\n        <br>\n        <input id="password" type="password" placeholder="Password">\n        <br>\n        <input id="login" type="button" value="Login">\n    </div>\n    ')+"\n        ")},a=document.getElementsByTagName("x-app")[0];null!=a?a.innerHTML=function(){switch(i.setTitle("App"),window.location.pathname){case"/":case"/login":return t(""+r({authorized:e()}));case"/todo":return t(""+o({authorized:e()})+(fetch("http://gamer/todo.page").then((function(n){return n.text()})).then((function(n){return document.write(n)})),t("\n\n    ")));default:return t(""+r({authorized:e()}))}}():console.log("%c<x-app></x-app>%c is not defined!","color: white; background-color: blue; font-size: 1.2em","color: red; font-size: 1.2em")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,