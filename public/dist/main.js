(()=>{"use strict";var e="frameworkappauth",n=function(){return null!=sessionStorage.getItem(e)&&"0"!==sessionStorage.getItem(e)},t=function(){function e(){}return e.setTitle=function(e){document.title=e},e.setCssImport=function(e){var n=document.createElement("link");n.rel="stylesheet",n.href="./style/"+e,document.head.appendChild(n)},e.id=function(e){return document.getElementById(e)},e.q=function(e){return document.querySelector(e)},e}(),i=function(e){return e.replace(/\r?\n|\r|\s{4}/g,"")},o=[],r=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];e.forEach((function(e){o.push(e)}))},a=function(){sessionStorage.removeItem(e),location.reload()},s=function(){var e;null===(e=t.id("topbarProfileButton"))||void 0===e||e.addEventListener("click",a)},d=function(e){return r(s),!1===e.authorized?i('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n            </div>\n            <div class="private">\n                <a href="/" class="button">Login</a>\n            </div>\n        </div>\n        '):!0===e.authorized?i('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n                <a href="/" class="button">Landing</a>\n                <a href="/feed" class="button">My feed</a>\n                <a href="/friends" class="button">Friends</a>\n            </div>\n            <div class="private">\n                <a href="/" class="button" id="topbarProfileButton">My Profile</a>\n            </div>\n        </div>\n        '):void 0},l=function(){var n,i,o=t.id("username"),r=t.id("password");""!=o.value&&""!=r.value?(n={username:o.value,password:r.value},i=function(n){n.authorized&&(sessionStorage.setItem(e,"true"),location.reload())},function(e,n,t){var i={url:"/auth/login",method:"POST",timeout:0,headers:{"Content-Type":"application/json"},data:JSON.stringify(n)};$.ajax(i).done(t)}(0,n,(function(e){i(e)}))):alert("You need to make this message pretty")},u=function(){},c=function(){},f=function(){var e,n,i;t.id("loading").style.visibility="hidden",null===(e=t.id("login"))||void 0===e||e.addEventListener("click",l),null===(n=t.id("register"))||void 0===n||n.addEventListener("click",u),null===(i=t.id("recover"))||void 0===i||i.addEventListener("click",c)},p=function(e){return t.setTitle("Homepage"),e.authorized?i("\n        "+d({authorized:!0})+"\n        "):i("\n        "+d({authorized:!1})+"\n        "+(t.setCssImport("login.css"),r(f),i("\n    "+(t.setCssImport("loading.css"),i('\n        <div id="loading">\n            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: rgb(255, 255, 255, 0) none repeat scroll 0% 0%; display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">\n                <circle cx="50" cy="50" r="32" stroke-width="8" stroke="#ff1f1f" stroke-dasharray="50.26548245743669 50.26548245743669" fill="none" stroke-linecap="round">\n                <animateTransform attributeName="transform" type="rotate" dur="1s" repeatCount="indefinite" keyTimes="0;1" values="0 50 50;360 50 50"></animateTransform>\n                </circle>\n                <circle cx="50" cy="50" r="23" stroke-width="8" stroke="#ffffd0" stroke-dasharray="36.12831551628262 36.12831551628262" stroke-dashoffset="36.12831551628262" fill="none" stroke-linecap="round">\n                <animateTransform attributeName="transform" type="rotate" dur="1s" repeatCount="indefinite" keyTimes="0;1" values="0 50 50;-360 50 50"></animateTransform>\n                </circle>\n            </svg>\n        </div>\n    ')+'\n    <div id="loginpage">\n        <form id="loginform">\n            <input class="loginform logintext" id="username" type="text" placeholder="Username">\n            <br>\n            <input class="loginform logintext" id="password" type="password" placeholder="Password">\n            <hr>\n            <input class="loginform loginbutton" id="login" type="button" value="Login">\n            <br>\n            <div id="regrec">\n                <input class="loginform loginbutton regrec" id="register" type="button" value="Register">\n                <input class="loginform loginbutton regrec" id="recover" type="button" value="Recover">\n            </div>\n\n        </form>\n    </div>\n    '))+"\n        "))},m=document.getElementsByTagName("x-app")[0];null!=m?(m.innerHTML=function(){switch(t.setTitle("App"),t.setCssImport("main.css"),window.location.pathname){case"/":case"/login":return i(""+p({authorized:n()}));case"/todo":return i(""+d({authorized:n()})+(fetch("http://gamer/todo.page").then((function(e){return e.text()})).then((function(e){return document.write(e)})),i("")));default:return i(""+p({authorized:n()}))}}(),o.forEach((function(e){e()}))):console.log("%c<x-app></x-app>%c is not defined!","color: white; background-color: blue; font-size: 1.2em","color: red; font-size: 1.2em")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvYXV0aC50cyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvZnJhbWV3b3JrLnRzIiwid2VicGFjazovL3B1YmxpYy8uL3NyYy9jb21wb25lbnRzL3RvcGJhci50cyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvY29tcG9uZW50cy9sb2dpbmZvcm0udHMiLCJ3ZWJwYWNrOi8vcHVibGljLy4vc3JjL2FqYXgudHMiLCJ3ZWJwYWNrOi8vcHVibGljLy4vc3JjL2NvbXBvbmVudHMvbG9hZGluZy50cyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvcm91dGVzL2xhbmRpbmcudHMiLCJ3ZWJwYWNrOi8vcHVibGljLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL3B1YmxpYy8uL3NyYy9hcHAudHMiLCJ3ZWJwYWNrOi8vcHVibGljLy4vc3JjL3JvdXRlcy90b2RvcGFnZS50cyJdLCJuYW1lcyI6WyJhdXRoS2V5IiwiY2hlY2tDbGllbnRBdXRoIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0VGl0bGUiLCJ0aXRsZSIsImRvY3VtZW50Iiwic2V0Q3NzSW1wb3J0IiwidXJsIiwibmV3TGlua0VsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicmVsIiwiaHJlZiIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImlkIiwiZ2V0RWxlbWVudEJ5SWQiLCJxIiwiZWxlbWVudFF1ZXJ5IiwicXVlcnlTZWxlY3RvciIsImh0bWwiLCJyZXBsYWNlIiwicnVudGltZUNhbGxiYWNrcyIsInJ1bnRpbWUiLCJjYWxsYmFja3MiLCJmb3JFYWNoIiwiY2FsbGJhY2siLCJwdXNoIiwidG9wYmFyUHJvZmlsZUJ1dHRvbkV2ZW50IiwicmVtb3ZlSXRlbSIsImxvY2F0aW9uIiwicmVsb2FkIiwiYXRSdW50aW1lIiwiRE9NIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlRvcGJhciIsInByb3BzIiwiYXV0aG9yaXplZCIsImxvZ2luRXZlbnQiLCJ1c2VyTG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidmFsdWUiLCJkYXRhIiwic2V0SXRlbSIsInNldHRpbmdzIiwibWV0aG9kIiwidGltZW91dCIsImhlYWRlcnMiLCJKU09OIiwic3RyaW5naWZ5IiwiJCIsImFqYXgiLCJkb25lIiwicG9zdCIsImFsZXJ0IiwicmVnaXN0ZXJFdmVudCIsInJlY292ZXJFdmVudCIsInN0eWxlIiwidmlzaWJpbGl0eSIsIkxhbmRpbmciLCJodG1sQXBwVGFnIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbm5lckhUTUwiLCJ3aW5kb3ciLCJwYXRobmFtZSIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwidGV4dCIsIndyaXRlIiwiQXBwIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Im1CQUdBLElBQU1BLEVBQVUsbUJBRUhDLEVBQWtCLFdBQzNCLE9BQXNDLE1BQW5DQyxlQUFlQyxRQUFRSCxJQUF3RCxNQUFwQ0UsZUFBZUMsUUFBUUgsSUNIekUsMkJBb0JBLE9BbkJrQixFQUFBSSxTQUFXLFNBQUNDLEdBQ3RCQyxTQUFTRCxNQUFRQSxHQUlQLEVBQUFFLGFBQWUsU0FBQ0MsR0FDMUIsSUFBTUMsRUFBaUJILFNBQVNJLGNBQWMsUUFDOUNELEVBQWVFLElBQU0sYUFDckJGLEVBQWVHLEtBQU8sV0FBYUosRUFDbkNGLFNBQVNPLEtBQUtDLFlBQVlMLElBR2hCLEVBQUFNLEdBQUssU0FBQ0EsR0FDaEIsT0FBT1QsU0FBU1UsZUFBZUQsSUFHckIsRUFBQUUsRUFBSSxTQUFDQyxHQUNmLE9BQU9aLFNBQVNhLGNBQWNELElBRXRDLEVBcEJBLEdBdUJhRSxFQUFPLFNBQUNBLEdBQ2pCLE9BQUFBLEVBQUtDLFFBQVEsa0JBQW1CLEtBRWhDQyxFQUErQixHQUN0QkMsRUFBVSxXLElBQUMsc0RBQ3BCQyxFQUFVQyxTQUFRLFNBQUNDLEdBQ2ZKLEVBQWlCSyxLQUFLRCxPQzdCeEJFLEVBQTJCLFdGZTdCMUIsZUFBZTJCLFdBQVc3QixHRWIxQjhCLFNBQVNDLFVBT1BDLEVBQVksVyxNQUNlLFFBQTdCLEVBQUFDLEVBQUEsR0FBTyw4QkFBc0IsU0FBRUMsaUJBQWlCLFFBQVNOLElBR2hETyxFQUFTLFNBQUNDLEdBRW5CLE9BREFiLEVBQVFTLElBQ2dCLElBQXJCSSxFQUFNQyxXQUNFakIsRUFBYSxrWEFhTSxJQUFyQmdCLEVBQU1DLFdBQ0pqQixFQUFhLHVrQkFEbEIsR0MzQkprQixFQUFhLFdBQ2YsSUNIaUNDLEVBQXNCYixFREdqRGMsRUFBNkJQLEVBQUlsQixHQUFHLFlBQ3BDMEIsRUFBNkJSLEVBQUlsQixHQUFHLFlBQ3JCLElBQWxCeUIsRUFBU0UsT0FBaUMsSUFBbEJELEVBQVNDLE9DTEhILEVETVIsQ0FBQ0MsU0FBVUEsRUFBU0UsTUFBT0QsU0FBVUEsRUFBU0MsT0NOaEJoQixFRE13QixTQUFDaUIsR0FDckVBLEVBQUtOLGFISWhCbkMsZUFBZTBDLFFBQVE1QyxFQUFTLFFHRnBCOEIsU0FBU0MsV0ZzQ0wsU0FBQ3ZCLEVBQWFtQyxFQUFjakIsR0FDNUMsSUFBTW1CLEVBQVcsQ0FDYnJDLElHaERDLGNIaUREc0MsT0FBUSxPQUNSQyxRQUFTLEVBQ1RDLFFBQVMsQ0FDTCxlQUFnQixvQkFFcEJMLEtBQU1NLEtBQUtDLFVBQVVQLElBRXpCUSxFQUFFQyxLQUFLUCxHQUFVUSxLQUFLM0IsR0d4RHRCNEIsQ0FBSyxFQUFlZixHQUFXLFNBQUNJLEdBQzVCakIsRUFBNEJpQixPRFc1QlksTUFBTSx5Q0FJUkMsRUFBZ0IsYUFJaEJDLEVBQWUsYUFJZixFQUFZLFcsVUV6QmV4QixFQUFJbEIsR0FBRyxXQUV4QjJDLE1BQU1DLFdBRWEsU0Z1QmhCLFFBQWYsRUFBQTFCLEVBQUEsR0FBTyxnQkFBUSxTQUFFQyxpQkFBaUIsUUFBU0ksR0FDekIsUUFBbEIsRUFBQUwsRUFBQSxHQUFPLG1CQUFXLFNBQUVDLGlCQUFpQixRQUFTc0IsR0FDN0IsUUFBakIsRUFBQXZCLEVBQUEsR0FBTyxrQkFBVSxTQUFFQyxpQkFBaUIsUUFBU3VCLElHdkJwQ0csRUFBVSxTQUFDeEIsR0FFcEIsT0FEQUgsRUFBSTdCLFNBQVMsWUFDVmdDLEVBQU1DLFdBQ0VqQixFQUFLLGFBQ1ZlLEVBQU8sQ0FBQ0UsWUFBWSxJQUFNLGNBR3JCakIsRUFBSyxhQUNWZSxFQUFPLENBQUNFLFlBQVksSUFBTyxjSG1CakNKLEVBQUkxQixhQUFhLGFBQ2pCZ0IsRUFBUSxHQUNESCxFQUFhLFVFMUJwQmEsRUFBSTFCLGFBQWEsZUFFVmEsRUFBYSxtb0NGeUJULGtzQkdyQk0sZ0JDZmZ5QyxFQUFhdkQsU0FBU3dELHFCQUFxQixTQUFTLEdBRXpDLE1BQWRELEdBQ0NBLEVBQVdFLFVDQUksV0FJZixPQUhBOUIsRUFBSTdCLFNBQVMsT0FDYjZCLEVBQUkxQixhQUFhLFlBRVZ5RCxPQUFPbEMsU0FBU21DLFVBQ25CLElBQUssSUFHTCxJQUFLLFNBQ0QsT0FBTzdDLEVBQWEsR0FBR3dDLEVBQVEsQ0FBQ3ZCLFdBQVlwQyxPQUVoRCxJQUFLLFFBQ0QsT0FBT21CLEVBQWEsR0FBR2UsRUFBTyxDQUFDRSxXQUFZcEMsT0NibkRpRSxNQUFNLDBCQUEwQkMsTUFBSyxTQUFBQyxHQUFZLE9BQUFBLEVBQVNDLFVBQVFGLE1BQUssU0FBQXhCLEdBQVEsT0FBQXJDLFNBQVNnRSxNQUFNM0IsTUFFdkZ2QixFQUFhLE1EYWhCLFFBQ0ksT0FBT0EsRUFBSyxHQUFHd0MsRUFBUSxDQUFDdkIsV0FBWXBDLFFEZnJCc0UsR044QnZCakQsRUFBaUJHLFNBQVEsU0FBQ0MsR0FDdEJBLFFNNUJKOEMsUUFBUUMsSUFBSSxzQ0FDWix5REFBMEQsaUMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKiBBbGwgdGhpcyBtYXkgYmUgb3ZlcndyaXR0ZW4gKi9cclxuXHJcbmNvbnN0IGF1dGhLZXkgPSAnZnJhbWV3b3JrYXBwYXV0aCc7XHJcblxyXG5leHBvcnQgY29uc3QgY2hlY2tDbGllbnRBdXRoID0gKCk6IGJvb2xlYW4gPT4ge1xyXG4gICAgaWYoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShhdXRoS2V5KSAhPSBudWxsICYmIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oYXV0aEtleSkgIT09ICcwJykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNldENsaWVudEF1dGggPSAoKTogdm9pZCA9PiB7XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGF1dGhLZXksICd0cnVlJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmVDbGllbnRBdXRoID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShhdXRoS2V5KTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNsZWFyU2Vzc2lvbiA9ICgpOiB2b2lkID0+IHtcclxuICAgIHNlc3Npb25TdG9yYWdlLmNsZWFyKCk7XHJcbn1cclxuXHJcblxyXG4iLCIvKiBHZW5lcmFsIEhUTUwgdXRpbGl0aWVzICovXHJcblxyXG4vLyBGb3IgZ2VuZXJhbFxyXG5leHBvcnQgY2xhc3MgRE9NIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0VGl0bGUgPSAodGl0bGU6IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LnRpdGxlID0gdGl0bGU7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlVSTCBzcGVjaWZpZXMgZmlsZSBpbiAvc3R5bGUvIGZvbGRlciAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBzZXRDc3NJbXBvcnQgPSAodXJsOiBzdHJpbmcpOiB2b2lkID0+IHtcclxuICAgICAgICBjb25zdCBuZXdMaW5rRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xyXG4gICAgICAgIG5ld0xpbmtFbGVtZW50LnJlbCA9IFwic3R5bGVzaGVldFwiO1xyXG4gICAgICAgIG5ld0xpbmtFbGVtZW50LmhyZWYgPSBcIi4vc3R5bGUvXCIgKyB1cmw7XHJcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChuZXdMaW5rRWxlbWVudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaWQgPSAoaWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcSA9IChlbGVtZW50UXVlcnk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnRRdWVyeSk7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyByZW1vdmVzIHdoaXRlc3BhY2UgZXRjXHJcbmV4cG9ydCBjb25zdCBodG1sID0gKGh0bWw6IHN0cmluZyk6IHN0cmluZyA9PlxyXG4gICAgaHRtbC5yZXBsYWNlKC9cXHI/XFxufFxccnxcXHN7NH0vZywgXCJcIik7XHJcblxyXG5sZXQgcnVudGltZUNhbGxiYWNrczogRnVuY3Rpb25bXSA9IFtdO1xyXG5leHBvcnQgY29uc3QgcnVudGltZSA9ICguLi5jYWxsYmFja3M6IEZ1bmN0aW9uW10pOiB2b2lkID0+IHtcclxuICAgIGNhbGxiYWNrcy5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xyXG4gICAgICAgIHJ1bnRpbWVDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0IGNvbnN0IGV4ZWNSdW50aW1lU2NyaXB0cyA9ICgpOiB2b2lkID0+IHtcclxuICAgIHJ1bnRpbWVDYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcclxuICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcbn07XHJcblxyXG4vKiBBamF4ICsgSlF1ZXJ5ICovXHJcbi8qXHJcbiAqICAgQWxsdGhvdWdoIGkgdGhpbmsgaXQgd291bGQgYmUgYmV0dGVyIHRvIGRvIHdpdGhvdXQganF1ZXJ5LCBpbSBsYXp5XHJcbiAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldCA9ICh1cmw6IHN0cmluZywgY2FsbGJhY2s6IChkYXRhOiBvYmplY3QpID0+IHZvaWQpID0+IHtcclxuICAgICQuZ2V0KHVybCwgY2FsbGJhY2ssIFwianNvblwiKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBwb3N0ID0gKHVybDogc3RyaW5nLCBkYXRhOiBvYmplY3QsIGNhbGxiYWNrOiAoZGF0YTogb2JqZWN0KSA9PiB2b2lkKSA9PiB7XHJcbiAgICBjb25zdCBzZXR0aW5ncyA9IHtcclxuICAgICAgICB1cmw6IHVybCxcclxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgIHRpbWVvdXQ6IDAsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgfTtcclxuICAgICQuYWpheChzZXR0aW5ncykuZG9uZShjYWxsYmFjayk7XHJcbn07XHJcblxyXG4vKiBNaXNjZWxsYW5lb3VzIHV0aWxpdGllcyAqL1xyXG5cclxuZXhwb3J0IGNvbnN0IG1ha2VpZCA9IChsZW5ndGg6IG51bWJlcik6IHN0cmluZyA9PiB7XHJcbiAgICBsZXQgaWQgPSBcIlwiO1xyXG4gICAgY29uc3QgY2hhcmFjdGVycyA9XHJcbiAgICAgICAgXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlkICs9IGNoYXJhY3RlcnMuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJhY3RlcnMubGVuZ3RoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWQ7XHJcbn07XHJcbiIsImltcG9ydCB7IHJlbW92ZUNsaWVudEF1dGggfSBmcm9tIFwiLi4vYXV0aFwiO1xyXG5pbXBvcnQgeyBET00sIGh0bWwsIHJ1bnRpbWUgfSBmcm9tIFwiLi4vZnJhbWV3b3JrXCI7XHJcblxyXG5jb25zdCB0b3BiYXJQcm9maWxlQnV0dG9uRXZlbnQgPSAoKSA9PiB7XHJcbiAgICByZW1vdmVDbGllbnRBdXRoKCk7XHJcbiAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxufVxyXG5cclxuY2xhc3MgUHJvcHMge1xyXG4gICAgYXV0aG9yaXplZDogYm9vbGVhbiA9IGZhbHNlO1xyXG59XHJcblxyXG5jb25zdCBhdFJ1bnRpbWUgPSAoKSA9PiB7XHJcbiAgICBET00uaWQoJ3RvcGJhclByb2ZpbGVCdXR0b24nKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b3BiYXJQcm9maWxlQnV0dG9uRXZlbnQpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVG9wYmFyID0gKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gICAgcnVudGltZShhdFJ1bnRpbWUpO1xyXG4gICAgaWYocHJvcHMuYXV0aG9yaXplZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gaHRtbCgvKmh0bWwqL2BcclxuICAgICAgICA8ZGl2IGlkPVwidG9wYmFyXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9mYXZpY29uLTMyeDMyLnBuZ1wiPlxyXG4gICAgICAgICAgICAgICAgPGgxPkZyYW1ld29yayBBcHA8L2gxPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB1YmxpY1wiPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByaXZhdGVcIj5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvXCIgY2xhc3M9XCJidXR0b25cIj5Mb2dpbjwvYT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYCk7XHJcbiAgICB9ZWxzZSBpZihwcm9wcy5hdXRob3JpemVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGh0bWwoLypodG1sKi9gXHJcbiAgICAgICAgPGRpdiBpZD1cInRvcGJhclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiLi9hc3NldHMvZmF2aWNvbi0zMngzMi5wbmdcIj5cclxuICAgICAgICAgICAgICAgIDxoMT5GcmFtZXdvcmsgQXBwPC9oMT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdWJsaWNcIj5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvXCIgY2xhc3M9XCJidXR0b25cIj5MYW5kaW5nPC9hPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIi9mZWVkXCIgY2xhc3M9XCJidXR0b25cIj5NeSBmZWVkPC9hPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIi9mcmllbmRzXCIgY2xhc3M9XCJidXR0b25cIj5GcmllbmRzPC9hPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByaXZhdGVcIj5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvXCIgY2xhc3M9XCJidXR0b25cIiBpZD1cInRvcGJhclByb2ZpbGVCdXR0b25cIj5NeSBQcm9maWxlPC9hPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgKTtcclxuICAgIH1cclxuICAgIFxyXG59O1xyXG4iLCJpbXBvcnQgeyBET00sIGh0bWwsIHJ1bnRpbWUgfSBmcm9tIFwiLi4vZnJhbWV3b3JrXCI7XHJcbmltcG9ydCB7IExvYWRpbmcsIHNldExvYWRpbmdTdGF0ZSB9IGZyb20gXCIuL2xvYWRpbmdcIjtcclxuaW1wb3J0IHsgc2VuZExvZ2luQ3JlZGVudGlhbHMgfSBmcm9tICcuLi9hamF4JztcclxuaW1wb3J0IHsgc2V0Q2xpZW50QXV0aCB9IGZyb20gXCIuLi9hdXRoXCI7XHJcblxyXG5jb25zdCBsb2dpbkV2ZW50ID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgY29uc3QgdXNlcm5hbWUgPSA8SFRNTElucHV0RWxlbWVudD5ET00uaWQoJ3VzZXJuYW1lJyk7XHJcbiAgICBjb25zdCBwYXNzd29yZCA9IDxIVE1MSW5wdXRFbGVtZW50PkRPTS5pZCgncGFzc3dvcmQnKTtcclxuICAgIGlmKHVzZXJuYW1lLnZhbHVlICE9ICcnICYmIHBhc3N3b3JkLnZhbHVlICE9ICcnKSB7XHJcbiAgICAgICAgc2VuZExvZ2luQ3JlZGVudGlhbHMoe3VzZXJuYW1lOiB1c2VybmFtZS52YWx1ZSwgcGFzc3dvcmQ6IHBhc3N3b3JkLnZhbHVlfSwgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgaWYoZGF0YS5hdXRob3JpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRDbGllbnRBdXRoKCk7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9ZWxzZSB7XHJcbiAgICAgICAgYWxlcnQoJ1lvdSBuZWVkIHRvIG1ha2UgdGhpcyBtZXNzYWdlIHByZXR0eScpXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IHJlZ2lzdGVyRXZlbnQgPSAoKTogdm9pZCA9PiB7XHJcblxyXG59XHJcblxyXG5jb25zdCByZWNvdmVyRXZlbnQgPSAoKTogdm9pZCA9PiB7XHJcblxyXG59XHJcblxyXG5jb25zdCBhdFJ1bnRpbWUgPSAoKTogdm9pZCA9PiB7XHJcbiAgICBzZXRMb2FkaW5nU3RhdGUoZmFsc2UpO1xyXG4gICAgRE9NLmlkKCdsb2dpbicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxvZ2luRXZlbnQpO1xyXG4gICAgRE9NLmlkKCdyZWdpc3RlcicpPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlZ2lzdGVyRXZlbnQpO1xyXG4gICAgRE9NLmlkKCdyZWNvdmVyJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVjb3ZlckV2ZW50KTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExvZ2luZm9ybSA9ICgpID0+IHtcclxuICAgIERPTS5zZXRDc3NJbXBvcnQoJ2xvZ2luLmNzcycpO1xyXG4gICAgcnVudGltZShhdFJ1bnRpbWUpO1xyXG4gICAgcmV0dXJuIGh0bWwoLypodG1sKi9gXHJcbiAgICAke0xvYWRpbmcoKX1cclxuICAgIDxkaXYgaWQ9XCJsb2dpbnBhZ2VcIj5cclxuICAgICAgICA8Zm9ybSBpZD1cImxvZ2luZm9ybVwiPlxyXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJsb2dpbmZvcm0gbG9naW50ZXh0XCIgaWQ9XCJ1c2VybmFtZVwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJVc2VybmFtZVwiPlxyXG4gICAgICAgICAgICA8YnI+XHJcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImxvZ2luZm9ybSBsb2dpbnRleHRcIiBpZD1cInBhc3N3b3JkXCIgdHlwZT1cInBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiPlxyXG4gICAgICAgICAgICA8aHI+XHJcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImxvZ2luZm9ybSBsb2dpbmJ1dHRvblwiIGlkPVwibG9naW5cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJMb2dpblwiPlxyXG4gICAgICAgICAgICA8YnI+XHJcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJyZWdyZWNcIj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImxvZ2luZm9ybSBsb2dpbmJ1dHRvbiByZWdyZWNcIiBpZD1cInJlZ2lzdGVyXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiUmVnaXN0ZXJcIj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImxvZ2luZm9ybSBsb2dpbmJ1dHRvbiByZWdyZWNcIiBpZD1cInJlY292ZXJcIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJSZWNvdmVyXCI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8L2Zvcm0+XHJcbiAgICA8L2Rpdj5cclxuICAgIGApO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBVc2VyTG9naW4sIFVzZXJMb2dpblJlc3BvbnNlIH0gZnJvbSBcIi4vbW9kZWxzXCI7XHJcbmltcG9ydCB7IGdldCwgcG9zdCB9IGZyb20gJy4vZnJhbWV3b3JrJ1xyXG5cclxuZXhwb3J0IGNvbnN0IHNlbmRMb2dpbkNyZWRlbnRpYWxzID0gKHVzZXJMb2dpbjogVXNlckxvZ2luLCBjYWxsYmFjazogKGRhdGE6IFVzZXJMb2dpblJlc3BvbnNlKSA9PiB2b2lkKTogdm9pZCA9PiB7XHJcbiAgICBwb3N0KCcvYXV0aC9sb2dpbicsIHVzZXJMb2dpbiwgKGRhdGEpID0+IHtcclxuICAgICAgICBjYWxsYmFjayg8VXNlckxvZ2luUmVzcG9uc2U+ZGF0YSk7XHJcbiAgICB9KVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgRE9NLCBodG1sIH0gZnJvbSBcIi4uL2ZyYW1ld29ya1wiXHJcblxyXG5leHBvcnQgY29uc3Qgc2V0TG9hZGluZ1N0YXRlID0gKHN0YXRlOiBib29sZWFuKSA9PiB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gPEhUTUxFbGVtZW50PkRPTS5pZCgnbG9hZGluZycpO1xyXG4gICAgaWYoc3RhdGUpIHtcclxuICAgICAgICBlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICB9ZWxzZSB7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBMb2FkaW5nID0gKCkgPT4ge1xyXG4gICAgRE9NLnNldENzc0ltcG9ydCgnbG9hZGluZy5jc3MnKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGh0bWwoLypodG1sKi9gXHJcbiAgICAgICAgPGRpdiBpZD1cImxvYWRpbmdcIj5cclxuICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgc3R5bGU9XCJtYXJnaW46IGF1dG87IGJhY2tncm91bmQ6IHJnYigyNTUsIDI1NSwgMjU1LCAwKSBub25lIHJlcGVhdCBzY3JvbGwgMCUgMCU7IGRpc3BsYXk6IGJsb2NrOyBzaGFwZS1yZW5kZXJpbmc6IGF1dG87XCIgd2lkdGg9XCIyMDBweFwiIGhlaWdodD1cIjIwMHB4XCIgdmlld0JveD1cIjAgMCAxMDAgMTAwXCIgcHJlc2VydmVBc3BlY3RSYXRpbz1cInhNaWRZTWlkXCI+XHJcbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVwiNTBcIiBjeT1cIjUwXCIgcj1cIjMyXCIgc3Ryb2tlLXdpZHRoPVwiOFwiIHN0cm9rZT1cIiNmZjFmMWZcIiBzdHJva2UtZGFzaGFycmF5PVwiNTAuMjY1NDgyNDU3NDM2NjkgNTAuMjY1NDgyNDU3NDM2NjlcIiBmaWxsPVwibm9uZVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIj5cclxuICAgICAgICAgICAgICAgIDxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9XCJ0cmFuc2Zvcm1cIiB0eXBlPVwicm90YXRlXCIgZHVyPVwiMXNcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIiBrZXlUaW1lcz1cIjA7MVwiIHZhbHVlcz1cIjAgNTAgNTA7MzYwIDUwIDUwXCI+PC9hbmltYXRlVHJhbnNmb3JtPlxyXG4gICAgICAgICAgICAgICAgPC9jaXJjbGU+XHJcbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PVwiNTBcIiBjeT1cIjUwXCIgcj1cIjIzXCIgc3Ryb2tlLXdpZHRoPVwiOFwiIHN0cm9rZT1cIiNmZmZmZDBcIiBzdHJva2UtZGFzaGFycmF5PVwiMzYuMTI4MzE1NTE2MjgyNjIgMzYuMTI4MzE1NTE2MjgyNjJcIiBzdHJva2UtZGFzaG9mZnNldD1cIjM2LjEyODMxNTUxNjI4MjYyXCIgZmlsbD1cIm5vbmVcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCI+XHJcbiAgICAgICAgICAgICAgICA8YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPVwidHJhbnNmb3JtXCIgdHlwZT1cInJvdGF0ZVwiIGR1cj1cIjFzXCIgcmVwZWF0Q291bnQ9XCJpbmRlZmluaXRlXCIga2V5VGltZXM9XCIwOzFcIiB2YWx1ZXM9XCIwIDUwIDUwOy0zNjAgNTAgNTBcIj48L2FuaW1hdGVUcmFuc2Zvcm0+XHJcbiAgICAgICAgICAgICAgICA8L2NpcmNsZT5cclxuICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICBgKTtcclxufVxyXG4iLCJpbXBvcnQgeyBodG1sLCBET00gfSBmcm9tICcuLi9mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBUb3BiYXIgfSBmcm9tICcuLi9jb21wb25lbnRzL3RvcGJhcic7XHJcbmltcG9ydCB7IExvZ2luZm9ybSB9IGZyb20gJy4uL2NvbXBvbmVudHMvbG9naW5mb3JtJztcclxuXHJcbmNsYXNzIFByb3BzIHtcclxuICAgIGF1dGhvcml6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBMYW5kaW5nID0gKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gICAgRE9NLnNldFRpdGxlKCdIb21lcGFnZScpO1xyXG4gICAgaWYocHJvcHMuYXV0aG9yaXplZCkge1xyXG4gICAgICAgIHJldHVybiBodG1sKGBcclxuICAgICAgICAke1RvcGJhcih7YXV0aG9yaXplZDogdHJ1ZX0pfVxyXG4gICAgICAgIGApO1xyXG4gICAgfWVsc2Uge1xyXG4gICAgICAgIHJldHVybiBodG1sKGBcclxuICAgICAgICAke1RvcGJhcih7YXV0aG9yaXplZDogZmFsc2V9KX1cclxuICAgICAgICAke0xvZ2luZm9ybSgpfVxyXG4gICAgICAgIGApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2FwcFwiO1xuaW1wb3J0IHsgZXhlY1J1bnRpbWVTY3JpcHRzIH0gZnJvbSBcIi4vZnJhbWV3b3JrXCI7XG5cbmNvbnN0IGh0bWxBcHBUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgneC1hcHAnKVswXTtcblxuaWYoaHRtbEFwcFRhZyAhPSBudWxsKSB7XG4gICAgaHRtbEFwcFRhZy5pbm5lckhUTUwgPSBBcHAoKTtcbiAgICBleGVjUnVudGltZVNjcmlwdHMoKTtcbn1lbHNlIHtcbiAgICBjb25zb2xlLmxvZygnJWM8eC1hcHA+PC94LWFwcD4lYyBpcyBub3QgZGVmaW5lZCEnLFxuICAgICdjb2xvcjogd2hpdGU7IGJhY2tncm91bmQtY29sb3I6IGJsdWU7IGZvbnQtc2l6ZTogMS4yZW0nLCAnY29sb3I6IHJlZDsgZm9udC1zaXplOiAxLjJlbScpO1xufVxuXG4iLCJpbXBvcnQgeyBjaGVja0NsaWVudEF1dGgsIHNldENsaWVudEF1dGggfSBmcm9tICcuL2F1dGgnO1xyXG5pbXBvcnQgeyBUb3BiYXIgfSBmcm9tICcuL2NvbXBvbmVudHMvdG9wYmFyJztcclxuaW1wb3J0IHsgaHRtbCwgRE9NIH0gZnJvbSAnLi9mcmFtZXdvcmsnO1xyXG5pbXBvcnQgeyBMYW5kaW5nIH0gZnJvbSAnLi9yb3V0ZXMvbGFuZGluZyc7XHJcbmltcG9ydCB7IFRvZG9wYWdlIH0gZnJvbSAnLi9yb3V0ZXMvdG9kb3BhZ2UnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFwcCA9ICgpOiBzdHJpbmcgPT4ge1xyXG4gICAgRE9NLnNldFRpdGxlKCdBcHAnKTtcclxuICAgIERPTS5zZXRDc3NJbXBvcnQoJ21haW4uY3NzJylcclxuXHJcbiAgICBzd2l0Y2god2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnLyc6XHJcbiAgICAgICAgICAgIHJldHVybiBodG1sKC8qaHRtbCovYCR7TGFuZGluZyh7YXV0aG9yaXplZDogY2hlY2tDbGllbnRBdXRoKCl9KX1gKTtcclxuXHJcbiAgICAgICAgY2FzZSAnL2xvZ2luJzpcclxuICAgICAgICAgICAgcmV0dXJuIGh0bWwoLypodG1sKi9gJHtMYW5kaW5nKHthdXRob3JpemVkOiBjaGVja0NsaWVudEF1dGgoKX0pfWApO1xyXG5cclxuICAgICAgICBjYXNlICcvdG9kbyc6XHJcbiAgICAgICAgICAgIHJldHVybiBodG1sKC8qaHRtbCovYCR7VG9wYmFyKHthdXRob3JpemVkOiBjaGVja0NsaWVudEF1dGgoKX0pfSR7VG9kb3BhZ2UoKX1gKTtcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIGh0bWwoYCR7TGFuZGluZyh7YXV0aG9yaXplZDogY2hlY2tDbGllbnRBdXRoKCl9KX1gKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBodG1sIH0gZnJvbSBcIi4uL2ZyYW1ld29ya1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRvZG9wYWdlID0gKCkgPT4ge1xyXG5cclxuICAgIFxyXG4gICAgZmV0Y2goJ2h0dHA6Ly9nYW1lci90b2RvLnBhZ2UnKS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSkudGhlbihkYXRhID0+IGRvY3VtZW50LndyaXRlKGRhdGEpKTtcclxuXHJcbiAgICByZXR1cm4gaHRtbCgvKmh0bWwqL2BgKTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9