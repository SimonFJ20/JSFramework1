(()=>{"use strict";var n=function(n){return n.replace(/\r?\n|\r|\s{4}/g,"")},e=function(){function n(){}return n.setTitle=function(n){document.title=n},n.setCssImport=function(n){document.createElement},n}(),t=function(e){return!1===e.autherized?n('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n            </div>\n            <div class="private">\n                <a href="/" class="button">Login</a>\n            </div>\n        </div>\n        '):!0===e.autherized?n('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n                <a href="/" class="button">My Profile</a>\n                <a href="/" class="button">My Profile</a>\n                <a href="/" class="button">My Profile</a>\n            </div>\n            <div class="private">\n                <a href="/" class="button">My Profile</a>\n            </div>\n        </div>\n        '):void 0},i=document.getElementsByTagName("x-app")[0];null!=i?i.innerHTML=function(){switch(e.setTitle("App"),sessionStorage.setItem("id",function(n){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",i=0;i<8;i++)e+=t.charAt(Math.floor(Math.random()*t.length));return e}()),console.log(window.location.pathname),window.location.pathname){case"/":return n("\n            "+t({autherized:!0})+"\n            ");case"/login":default:return n("\n            "+t({autherized:!1})+"\n            ")}}():console.log("%c<x-app></x-app>%c is not defined!","color: white; background-color: blue; font-size: 1.2em","color: red; font-size: 1.2em")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvZnJhbWV3b3JrLnRzIiwid2VicGFjazovL3B1YmxpYy8uL3NyYy9jb21wb25lbnRzL3RvcGJhci50cyIsIndlYnBhY2s6Ly9wdWJsaWMvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vcHVibGljLy4vc3JjL2FwcC50cyJdLCJuYW1lcyI6WyJodG1sIiwicmVwbGFjZSIsInNldFRpdGxlIiwidGl0bGUiLCJkb2N1bWVudCIsInNldENzc0ltcG9ydCIsInVybCIsImNyZWF0ZUVsZW1lbnQiLCJUb3BiYXIiLCJwcm9wcyIsImF1dGhlcml6ZWQiLCJodG1sQXBwVGFnIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbm5lckhUTUwiLCJET00iLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJsZW5ndGgiLCJpZCIsImNoYXJhY3RlcnMiLCJpIiwiY2hhckF0IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibWFrZWlkIiwiY29uc29sZSIsImxvZyIsIndpbmRvdyIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJBcHAiXSwibWFwcGluZ3MiOiJtQkFJTyxJQUFNQSxFQUFPLFNBQUNBLEdBQXlCLE9BQUFBLEVBQUtDLFFBQVEsa0JBQW1CLEtBRTlFLDJCQVVBLE9BUmtCLEVBQUFDLFNBQVcsU0FBQ0MsR0FDdEJDLFNBQVNELE1BQVFBLEdBR1AsRUFBQUUsYUFBZSxTQUFDQyxHQUMxQkYsU0FBU0csZUFHakIsRUFWQSxHQ0FhQyxFQUFTLFNBQUNDLEdBQ25CLE9BQXdCLElBQXJCQSxFQUFNQyxXQUNFVixFQUFhLGtYQWFNLElBQXJCUyxFQUFNQyxXQUNKVixFQUFhLDRpQkFEbEIsR0NuQkpXLEVBQWFQLFNBQVNRLHFCQUFxQixTQUFTLEdBRXpDLE1BQWRELEVBQ0NBLEVBQVdFLFVDRkksV0FPZixPQU5BQyxFQUFJWixTQUFTLE9BRWJhLGVBQWVDLFFBQVEsS0hnQkwsU0FBQ0MsR0FHbkIsSUFGQSxJQUFJQyxFQUFLLEdBQ0hDLEVBQWEsaUVBQ1hDLEVBQUksRUFBR0EsRUduQnFCLEVIbUJUQSxJQUN4QkYsR0FBTUMsRUFBV0UsT0FBT0MsS0FBS0MsTUFBTUQsS0FBS0UsU0FBV0wsRUFBV0YsU0FFakUsT0FBT0MsRUd0QnNCTyxJQUU3QkMsUUFBUUMsSUFBSUMsT0FBT0MsU0FBU0MsVUFFckJGLE9BQU9DLFNBQVNDLFVBQ25CLElBQUssSUFDRCxPQUFPOUIsRUFBSyxpQkFDVlEsRUFBTyxDQUFDRSxZQUFZLElBQU0sa0JBR2hDLElBQUssU0FLTCxRQUNJLE9BQU9WLEVBQUssaUJBQ1ZRLEVBQU8sQ0FBQ0UsWUFBWSxJQUFPLG1CRGxCZHFCLEdBRXZCTCxRQUFRQyxJQUFJLHNDQUNaLHlEQUEwRCxpQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG4vKiBHZW5lcmFsIEhUTUwgdXRpbGl0aWVzICovXHJcblxyXG5leHBvcnQgY29uc3QgaHRtbCA9IChodG1sOiBzdHJpbmcpOiBzdHJpbmcgPT4gaHRtbC5yZXBsYWNlKC9cXHI/XFxufFxccnxcXHN7NH0vZywgJycpO1xyXG5cclxuZXhwb3J0IGNsYXNzIERPTSB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBzZXRUaXRsZSA9ICh0aXRsZTogc3RyaW5nKTogdm9pZCA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSB0aXRsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHNldENzc0ltcG9ydCA9ICh1cmw6IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG5cclxuLyogTWlzY2VsbGFuZW91cyB1dGlsaXRpZXMgKi9cclxuXHJcbmV4cG9ydCBjb25zdCBtYWtlaWQgPSAobGVuZ3RoOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xyXG4gICAgbGV0IGlkID0gJyc7XHJcbiAgICBjb25zdCBjaGFyYWN0ZXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcclxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgaWQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVycy5sZW5ndGgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpZDtcclxuIH1cclxuIiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gXCIuLi9mcmFtZXdvcmtcIjtcclxuXHJcbmNsYXNzIFByb3BzIHtcclxuICAgIGF1dGhlcml6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFRvcGJhciA9IChwcm9wczogUHJvcHMpID0+IHtcclxuICAgIGlmKHByb3BzLmF1dGhlcml6ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIGh0bWwoLypodG1sKi9gXHJcbiAgICAgICAgPGRpdiBpZD1cInRvcGJhclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiLi9hc3NldHMvZmF2aWNvbi0zMngzMi5wbmdcIj5cclxuICAgICAgICAgICAgICAgIDxoMT5GcmFtZXdvcmsgQXBwPC9oMT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdWJsaWNcIj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcml2YXRlXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiL1wiIGNsYXNzPVwiYnV0dG9uXCI+TG9naW48L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGApO1xyXG4gICAgfWVsc2UgaWYocHJvcHMuYXV0aGVyaXplZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHJldHVybiBodG1sKC8qaHRtbCovYFxyXG4gICAgICAgIDxkaXYgaWQ9XCJ0b3BiYXJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4vYXNzZXRzL2Zhdmljb24tMzJ4MzIucG5nXCI+XHJcbiAgICAgICAgICAgICAgICA8aDE+RnJhbWV3b3JrIEFwcDwvaDE+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHVibGljXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiL1wiIGNsYXNzPVwiYnV0dG9uXCI+TXkgUHJvZmlsZTwvYT5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIvXCIgY2xhc3M9XCJidXR0b25cIj5NeSBQcm9maWxlPC9hPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIi9cIiBjbGFzcz1cImJ1dHRvblwiPk15IFByb2ZpbGU8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpdmF0ZVwiPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIi9cIiBjbGFzcz1cImJ1dHRvblwiPk15IFByb2ZpbGU8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGApO1xyXG4gICAgfVxyXG4gICAgXHJcbn07XHJcbiIsImltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2FwcFwiO1xuXG5jb25zdCBodG1sQXBwVGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3gtYXBwJylbMF07XG5cbmlmKGh0bWxBcHBUYWcgIT0gbnVsbCkge1xuICAgIGh0bWxBcHBUYWcuaW5uZXJIVE1MID0gQXBwKCk7XG59ZWxzZSB7XG4gICAgY29uc29sZS5sb2coJyVjPHgtYXBwPjwveC1hcHA+JWMgaXMgbm90IGRlZmluZWQhJyxcbiAgICAnY29sb3I6IHdoaXRlOyBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlOyBmb250LXNpemU6IDEuMmVtJywgJ2NvbG9yOiByZWQ7IGZvbnQtc2l6ZTogMS4yZW0nKTtcbn1cblxuIiwiaW1wb3J0IHsgaHRtbCwgRE9NLCBtYWtlaWQgfSBmcm9tICcuL2ZyYW1ld29yayc7XHJcbmltcG9ydCB7IFRvcGJhciB9IGZyb20gJy4vY29tcG9uZW50cy90b3BiYXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFwcCA9ICgpOiBzdHJpbmcgPT4ge1xyXG4gICAgRE9NLnNldFRpdGxlKCdBcHAnKTtcclxuXHJcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdpZCcsIG1ha2VpZCg4KSk7XHJcblxyXG4gICAgY29uc29sZS5sb2cod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKVxyXG5cclxuICAgIHN3aXRjaCh3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpIHtcclxuICAgICAgICBjYXNlICcvJzpcclxuICAgICAgICAgICAgcmV0dXJuIGh0bWwoYFxyXG4gICAgICAgICAgICAke1RvcGJhcih7YXV0aGVyaXplZDogdHJ1ZX0pfVxyXG4gICAgICAgICAgICBgKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnL2xvZ2luJzpcclxuICAgICAgICAgICAgcmV0dXJuIGh0bWwoYFxyXG4gICAgICAgICAgICAke1RvcGJhcih7YXV0aGVyaXplZDogZmFsc2V9KX1cclxuICAgICAgICAgICAgYCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBodG1sKGBcclxuICAgICAgICAgICAgJHtUb3BiYXIoe2F1dGhlcml6ZWQ6IGZhbHNlfSl9XHJcbiAgICAgICAgICAgIGApO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9