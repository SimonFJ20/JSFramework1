(()=>{"use strict";var n="frameworkappauth",e=function(){return null!=sessionStorage.getItem(n)&&"0"!==sessionStorage.getItem(n)},t=function(){function n(){}return n.setTitle=function(n){document.title=n},n.setCssImport=function(n){var e=document.createElement("link");e.rel="stylesheet",e.href="./style/"+n,document.head.appendChild(e)},n.id=function(n){return document.getElementById(n)},n.q=function(n){return document.querySelector(n)},n}(),i=function(n){return n.replace(/\r?\n|\r|\s{4}/g,"")},r=[],o=function(n){return!1===n.authorized?i('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n            </div>\n            <div class="private">\n                <a href="/" class="button">Login</a>\n            </div>\n        </div>\n        '):!0===n.authorized?i('\n        <div id="topbar">\n            <div class="title">\n                <img src="./assets/favicon-32x32.png">\n                <h1>Framework App</h1>\n            </div>\n            <div class="public">\n                <a href="/" class="button">Front page</a>\n                <a href="/feed" class="button">My feed</a>\n                <a href="/friends" class="button">Friends</a>\n            </div>\n            <div class="private">\n                <a href="/" class="button">My Profile</a>\n            </div>\n        </div>\n        '):void 0},a=function(){var n,e,i=t.id("username"),r=t.id("password");""!=i.value&&""!=r.value?(n={username:i.value,password:r.value},e=function(n){console.log(n)},function(n,e,t){var i={url:"/auth/login",method:"POST",timeout:0,headers:{"Content-Type":"application/json"},data:JSON.stringify(e)};$.ajax(i).done(t)}(0,n,(function(n){e(n)}))):alert("You need to make this message pretty")},s=function(){},d=function(){},l=function(){var n,e,i;t.id("loading").style.visibility="hidden",null===(n=t.id("login"))||void 0===n||n.addEventListener("click",a),null===(e=t.id("register"))||void 0===e||e.addEventListener("click",s),null===(i=t.id("recover"))||void 0===i||i.addEventListener("click",d)},c=function(n){return t.setTitle("Homepage"),n.authorized?i("\n        "+o({authorized:!0})+"\n        "):i("\n        "+o({authorized:!1})+"\n        "+(t.setCssImport("login.css"),function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];n.forEach((function(n){r.push(n)}))}(l),i("\n    "+(t.setCssImport("loading.css"),i('\n        <div id="loading">\n            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="margin: auto; background: rgb(255, 255, 255, 0) none repeat scroll 0% 0%; display: block; shape-rendering: auto;" width="200px" height="200px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">\n                <circle cx="50" cy="50" r="32" stroke-width="8" stroke="#ff1f1f" stroke-dasharray="50.26548245743669 50.26548245743669" fill="none" stroke-linecap="round">\n                <animateTransform attributeName="transform" type="rotate" dur="1s" repeatCount="indefinite" keyTimes="0;1" values="0 50 50;360 50 50"></animateTransform>\n                </circle>\n                <circle cx="50" cy="50" r="23" stroke-width="8" stroke="#ffffd0" stroke-dasharray="36.12831551628262 36.12831551628262" stroke-dashoffset="36.12831551628262" fill="none" stroke-linecap="round">\n                <animateTransform attributeName="transform" type="rotate" dur="1s" repeatCount="indefinite" keyTimes="0;1" values="0 50 50;-360 50 50"></animateTransform>\n                </circle>\n            </svg>\n        </div>\n    ')+'\n    <div id="loginpage">\n        <form id="loginform">\n            <input class="loginform logintext" id="username" type="text" placeholder="Username">\n            <br>\n            <input class="loginform logintext" id="password" type="password" placeholder="Password">\n            <hr>\n            <input class="loginform loginbutton" id="login" type="button" value="Login">\n            <br>\n            <div id="regrec">\n                <input class="loginform loginbutton regrec" id="register" type="button" value="Register">\n                <input class="loginform loginbutton regrec" id="recover" type="button" value="Recover">\n            </div>\n\n        </form>\n    </div>\n    '))+"\n        "))},u=document.getElementsByTagName("x-app")[0];null!=u?(u.innerHTML=function(){switch(t.setTitle("App"),t.setCssImport("main.css"),window.location.pathname){case"/":case"/login":return i(""+c({authorized:e()}));case"/todo":return i(""+o({authorized:e()})+(fetch("http://gamer/todo.page").then((function(n){return n.text()})).then((function(n){return document.write(n)})),i("")));default:return i(""+c({authorized:e()}))}}(),r.forEach((function(n){n()}))):console.log("%c<x-app></x-app>%c is not defined!","color: white; background-color: blue; font-size: 1.2em","color: red; font-size: 1.2em")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,